import os
import json
from jinja2 import Template

HTML_TEMPLATE = """<!DOCTYPE html>
<html lang=\"en\">
<head>
<meta charset=\"utf-8\">
<title>Web Vulnerability Scan Report</title>
<style>
body { font-family: Arial, sans-serif; margin: 2rem; background:#fafafa; }
h1,h2,h3 { color:#333; }
table { border-collapse: collapse; width:100%; margin-bottom:1.5rem; }
th, td { border:1px solid #ccc; padding:6px; font-size: 0.9rem; }
th { background:#eee; }
.sev-High { background:#ffb3b3; }
.sev-Medium { background:#ffe0b3; }
.sev-Low { background:#fff9b3; }
.sev-Info { background:#e2e2e2; }
code { background:#f0f0f0; padding:2px 4px; }
footer { margin-top:2rem; font-size:0.8rem; color:#666; }
</style>
</head>
<body>
<h1>Web Vulnerability Scan Report</h1>
<p><strong>Target:</strong> {{ target }}</p>
<p><strong>Scan Window (UTC):</strong> {{ state.start_time }} to {{ state.end_time }}</p>
<h2>Configuration</h2>
<pre>{{ state.config_used | tojson(indent=2) }}</pre>

<h2>Discovered Pages ({{ state.pages|length }})</h2>
<table>
<tr><th>URL</th><th>Status</th></tr>
{% for url, meta in state.pages.items() %}
<tr><td>{{ url }}</td><td>{{ meta.status }}</td></tr>
{% endfor %}
</table>

<h2>Technology Fingerprint</h2>
<pre>{{ state.stack | tojson(indent=2) }}</pre>

<h2>Findings ({{ findings|length }})</h2>
<table>
<tr><th>ID</th><th>Severity</th><th>Category</th><th>Title</th><th>Location</th></tr>
{% for f in findings %}
<tr class=\"sev-{{ f.severity }}\"><td>{{ f.id }}</td><td>{{ f.severity }}</td><td>{{ f.category }}</td><td>{{ f.title }}</td><td>{{ f.location }}</td></tr>
{% endfor %}
</table>

{% for f in findings %}
<h3 id=\"{{ f.id }}\">{{ f.id }} - {{ f.title }}</h3>
<p><strong>Severity:</strong> {{ f.severity }} | <strong>Category:</strong> {{ f.category }}</p>
<p><strong>Location:</strong> {{ f.location }}</p>
<p><strong>Description:</strong> {{ f.description }}</p>
<p><strong>Evidence:</strong><br><code>{{ f.evidence }}</code></p>
<p><strong>Recommendation:</strong> {{ f.recommendation }}</p>
{% endfor %}

<h2>Forms Inventory ({{ state.forms|length }})</h2>
<table>
<tr><th>Page</th><th>Method</th><th>Action</th><th>Inputs</th></tr>
{% for form in state.forms %}
<tr><td>{{ form.page }}</td><td>{{ form.method }}</td><td>{{ form.action }}</td><td>
{% for inp in form.inputs %}{{ inp.name }} ({{ inp.type }}), {% endfor %}
</td></tr>
{% endfor %}
</table>

<h2>Disclaimer</h2>
<p>This tool is for authorized security testing and educational use only. Do not scan systems without explicit permission.</p>
<footer>Generated by LightScan</footer>
</body>
</html>"""

def finding_dict(title, category, severity, location, description, evidence, recommendation):
    return {
        "id": None,
        "title": title,
        "category": category,
        "severity": severity,
        "location": location,
        "description": description,
        "evidence": evidence[:300],
        "recommendation": recommendation
    }

class ReportBuilder:
    def __init__(self, target, state, output_dir, output_formats, json_output, logger):
        self.target = target
        self.state = state
        self.output_dir = output_dir
        self.output_formats = output_formats
        self.json_output = json_output
        self.logger = logger

    def _assign_ids(self):
        for i, f in enumerate(self.state.findings, start=1):
            f["id"] = f"V-{i:03d}"

    def _build_markdown(self):
        md = []
        md.append("# Web Vulnerability Scan Report")
        md.append("")
        md.append("## 1. Overview")
        md.append(f"- Target: {self.target}")
        md.append(f"- Scan Start (UTC): {self.state.start_time}")
        md.append(f"- Scan End (UTC): {self.state.end_time}")
        md.append("")
        md.append("## 2. Configuration")
        md.append("```json")
        import json as _json
        md.append(_json.dumps(self.state.config_used, indent=2))
        md.append("```")
        md.append("")
        md.append("## 3. Target & Scope")
        md.append(f"Scanned base URL: {self.target}")
        md.append("")
        md.append("## 4. Discovered Content")
        md.append("| URL | Status |")
        md.append("|-----|--------|")
        for url, meta in self.state.pages.items():
            md.append(f"| {url} | {meta['status']} |")
        md.append("")
        md.append("## 5. Technology Fingerprint")
        md.append("```json")
        md.append(_json.dumps(self.state.stack, indent=2))
        md.append("```")
        md.append("")
        md.append("## 6. Findings Summary Table")
        md.append("| ID | Severity | Category | Title | Location |")
        md.append("|----|----------|----------|-------|----------|")
        for f in self.state.findings:
            md.append(f"| {f['id']} | {f['severity']} | {f['category']} | {f['title']} | {f['location']} |")
        md.append("")
        md.append("## 7. Detailed Findings")
        for f in self.state.findings:
            md.append(f"### {f['id']} - {f['title']}")
            md.append(f"- Severity: **{f['severity']}**")
            md.append(f"- Category: {f['category']}")
            md.append(f"- Location: `{f['location']}`")
            md.append("")
            md.append(f"**Description:** {f['description']}")
            md.append("")
            md.append("**Evidence:**")
            md.append("```")
            md.append(f['evidence'])
            md.append("```")
            md.append("")
            md.append(f"**Recommendation:** {f['recommendation']}")
            md.append("")
        md.append("## 8. Recommendations")
        md.append("- Implement missing security headers (CSP, HSTS, X-Frame-Options, X-Content-Type-Options, Referrer-Policy, Permissions-Policy).")
        md.append("- Enforce server-side validation and proper output encoding.")
        md.append("- Use parameterized queries to mitigate SQL injection.")
        md.append("- Harden cookie attributes (Secure, HttpOnly, SameSite).")
        md.append("- Remove or restrict access to hidden or sensitive files.")
        md.append("")
        md.append("## 9. Evidence Snippets")
        md.append("Evidence included inline per finding.")
        md.append("")
        md.append("## 10. Disclaimer")
        md.append("> This tool is for authorized security testing and educational use only. Do not scan systems without explicit permission.")
        md.append("")
        md.append("## 11. Appendix (Forms Inventory)")
        md.append("| Page | Method | Action | Inputs |")
        md.append("|------|--------|--------|--------|")
        for form in self.state.forms:
            inputs = ", ".join([i['name'] or "(no-name)" for i in form['inputs']])
            md.append(f"| {form['page']} | {form['method'].upper()} | {form['action']} | {inputs} |")
        return "\n".join(md)

    def _build_html(self):
        tmpl = Template(HTML_TEMPLATE)
        return tmpl.render(target=self.target, state=self.state, findings=self.state.findings)

    def _markdown_to_text(self, md_content):
        import re
        text = re.sub(r"`{3,}.*?`{3,}", "", md_content, flags=re.DOTALL)
        text = re.sub(r"#+", "", text)
        return text

    def generate(self):
        self._assign_ids()
        outputs = []
        md = self._build_markdown()
        if "md" in self.output_formats:
            md_path = os.path.join(self.output_dir, "scan_report.md")
            with open(md_path, "w", encoding="utf-8") as f:
                f.write(md)
            outputs.append(md_path)
        if "html" in self.output_formats:
            html = self._build_html()
            html_path = os.path.join(self.output_dir, "scan_report.html")
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(html)
            outputs.append(html_path)
        if "txt" in self.output_formats:
            txt = self._markdown_to_text(md)
            txt_path = os.path.join(self.output_dir, "scan_report.txt")
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(txt)
            outputs.append(txt_path)
        if self.json_output or "json" in self.output_formats:
            json_path = os.path.join(self.output_dir, "scan_report.json")
            data = {
                "target": self.target,
                "time": {"start": self.state.start_time, "end": self.state.end_time},
                "config": self.state.config_used,
                "pages": {k: {"status": v["status"]} for k,v in self.state.pages.items()},
                "findings": self.state.findings,
                "stack": self.state.stack
            }
            with open(json_path, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=2)
            outputs.append(json_path)
        return outputs
